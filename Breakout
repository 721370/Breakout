import random
import pygame
pygame.init

screen = pygame.display.set_mode((700, 500))
pygame.display.set_caption("Break")

doExit = False

clock = pygame.time.Clock()

#variable   
p1x = 300
p1y = 400

bx = 350 
by = 300

bVx = 5
bVy = 5
isDead = False
class brick:
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.color = (random.randrange(100, 250),random.randrange(100,250),random.randrange(100,250))
        self.isDead = False


    def draw(self):
        if not self.isDead:
            pygame.draw.rect(screen, self.color, (self.xpos, self.ypos, 100, 50))

    def collide(self, bx, by):
        if not self.isDead:
            if (bx + 15 > self.xpos and
                bx < self.xpos + 100 and
                by + 15 > self.ypos and
                by < self.xpos + 50):
                self.isDead = True
                return True
        return False

Bob = brick(50, 50)
Samuel = brick(180, 50)
James = brick(180, 120)
Jackson = brick(50, 120)
Potato = brick(310, 50)
Apple = brick(310, 120)
orange = brick(440, 120)
pear = brick(440, 50)
Eevee = brick(570, 50)
Flareon = brick(570, 120)

#game loop
while not doExit:

    clock.tick(60)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            doExit = True

    #game logic
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        p1x-=10
    if keys[pygame.K_RIGHT]:
        p1x+=10

    #Game logic
    bx += bVx
    by += bVy

    #bounce top and bottom
    if by <= 0 or by + 20 >= 500:
        bVy *= -1

    if bx <= 0 or bx + 20 >= 700:
        bVx *= -1

    #paddle collision
    if bx+10 > p1x and bx-10<p1x+100 and by+10 > p1y:
        bVy  *= -1

    #bhrick collision
    if Bob.collide(bx, by):
        bVy *= -1

    if Bob.isDead == True:
        Bob.collide(bx, by) == False

    if Samuel.collide(bx, by):
        bVy *= -1

    if Samuel.isDead == True:
        Samuel.collide(bx, by) == False

    if James.collide(bx, by):
        bVy *= -1

    if James.isDead == True:
        Bob.collide(bx, by) == False
        
    if Jackson.collide(bx, by):
        bVy *= -1

    if Jackson.isDead == True:
        Jackson.collide(bx, by) == False

    if Potato.collide(bx, by):
        bVy *= -1
    
    if Potato.isDead == True:
        Potato.collide(bx, by) == False

    if Apple.collide(bx, by):
        bVy *= -1

    if Apple.isDead == True:
        Apple.collide(bx, by) == False

    if orange.collide(bx, by):
        bVy *= -1

    if orange.isDead == True:
        orange.collide(bx, by) == False

    if pear.collide(bx, by):
        bVy *= -1
    
    if pear.isDead == True:
        pear.collide(bx, by) == False

    if Eevee.collide(bx, by):
        bVy *= -1
    
    if Eevee.isDead == True:
        Eevee.collide(bx, by) == False

    if Flareon.collide(bx, by):
        bVy *= -1

    if Flareon.isDead == True:
        Flareon.collide(bx, by) == False

    #render
    screen.fill((0,0,0)) 
    pygame.draw.rect(screen, (255, 255, 255), (p1x, p1y, 100, 20), 1)
    pygame.draw.circle(screen, (255, 255, 255), (bx, by), 15)
    Bob.draw()
    Samuel.draw()
    James.draw()
    Jackson.draw()
    Potato.draw()
    Apple.draw()
    orange.draw()
    pear.draw()
    Eevee.draw()
    Flareon.draw()

    if Bob.isDead == (False):
        Bob.draw()
    
    if Samuel.isDead == (False):
        Samuel.draw()
    
    if James.isDead == (False):
        James.draw()

    if Jackson.isDead == (False):
        Jackson.draw()

    if Potato.isDead == (False):
        Potato.draw()

    if Apple.isDead == (False):
        Apple.draw()

    if orange.isDead == (False):
        orange.draw()

    if pear.isDead == (False):
        pear.draw()

    if Eevee.isDead == (False):
        Eevee.draw()

    if Flareon.isDead == (False):
        Flareon.draw()
    pygame.display.flip()
#end game
pygame.quit()
